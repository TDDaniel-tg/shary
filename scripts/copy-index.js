import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
const possibleSources = [
  path.join(__dirname, '..', 'out', 'index.html'),
  path.join(__dirname, '..', '.next', 'server', 'app', 'index.html'),
];

const targetFile = path.join(__dirname, '..', 'index.html');

try {
  let sourceFile = null;
  
  // –ò—â–µ–º index.html –≤ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
  for (const possibleSource of possibleSources) {
    if (fs.existsSync(possibleSource)) {
      sourceFile = possibleSource;
      break;
    }
  }
  
  if (sourceFile) {
    // –ö–æ–ø–∏—Ä—É–µ–º index.html –≤ –∫–æ—Ä–µ–Ω—å
    fs.copyFileSync(sourceFile, targetFile);
    console.log('‚úÖ index.html —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É');
    console.log(`üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: ${sourceFile}`);
    console.log(`üìÅ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${targetFile}`);
  } else {
    console.error('‚ùå –§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω –≤:');
    possibleSources.forEach(src => console.log(`   - ${src}`));
    console.log('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run build');
  }
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
} 