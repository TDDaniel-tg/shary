{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/work/project/lib/models/Product.ts"],"sourcesContent":["import { Pool } from 'pg';\r\n\r\nconst pool = new Pool({\r\n  user: process.env.DB_USER || 'postgres',\r\n  host: process.env.DB_HOST || 'localhost',\r\n  database: process.env.DB_NAME || 'balloons_store',\r\n  password: process.env.DB_PASSWORD || 'password',\r\n  port: parseInt(process.env.DB_PORT || '5432'),\r\n  ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false,\r\n});\r\n\r\nexport interface Product {\r\n  id: number;\r\n  name: string;\r\n  slug: string;\r\n  description?: string;\r\n  short_description?: string;\r\n  price: number;\r\n  original_price?: number;\r\n  category_id?: number;\r\n  image_url?: string;\r\n  images?: string[];\r\n  rating: number;\r\n  reviews_count: number;\r\n  in_stock: boolean;\r\n  stock_quantity: number;\r\n  sku?: string;\r\n  tags?: string[];\r\n  meta_title?: string;\r\n  meta_description?: string;\r\n  is_featured: boolean;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport class ProductModel {\r\n  \r\n  static async getAll(filters?: {\r\n    category?: string;\r\n    search?: string;\r\n    featured?: boolean;\r\n    limit?: number;\r\n    offset?: number;\r\n    store_id?: number;\r\n  }): Promise<Product[]> {\r\n    let query = `\r\n      SELECT p.*, c.name as category_name\r\n    `;\r\n    if (filters?.store_id) {\r\n      query += ', ps.stock_quantity';\r\n    }\r\n    query += ` FROM products p \r\n      LEFT JOIN categories c ON p.category_id = c.id \r\n    `;\r\n    if (filters?.store_id) {\r\n      query += 'LEFT JOIN product_stocks ps ON ps.product_id = p.id AND ps.store_id = $storeId$ ';\r\n    }\r\n    query += 'WHERE p.is_active = true';\r\n    const params: any[] = [];\r\n    let paramIndex = 1;\r\n    if (filters?.category) {\r\n      query += ` AND c.slug = $${paramIndex}`;\r\n      params.push(filters.category);\r\n      paramIndex++;\r\n    }\r\n    if (filters?.search) {\r\n      query += ` AND (p.name ILIKE $${paramIndex} OR p.description ILIKE $${paramIndex})`;\r\n      params.push(`%${filters.search}%`);\r\n      paramIndex++;\r\n    }\r\n    if (filters?.featured) {\r\n      query += ` AND p.is_featured = true`;\r\n    }\r\n    if (filters?.store_id) {\r\n      query += ` AND ps.stock_quantity > 0`;\r\n    }\r\n    query += ` ORDER BY p.sort_order ASC, p.created_at DESC`;\r\n    if (filters?.limit) {\r\n      query += ` LIMIT $${paramIndex}`;\r\n      params.push(filters.limit);\r\n      paramIndex++;\r\n    }\r\n    if (filters?.offset) {\r\n      query += ` OFFSET $${paramIndex}`;\r\n      params.push(filters.offset);\r\n    }\r\n    // Подстановка store_id\r\n    let finalQuery = query;\r\n    if (filters?.store_id) {\r\n      finalQuery = query.replace(/\\$storeId\\$/g, `$${paramIndex}`);\r\n      params.push(filters.store_id);\r\n    }\r\n    const result = await pool.query(finalQuery, params);\r\n    return result.rows;\r\n  }\r\n\r\n  static async getById(id: number): Promise<Product | null> {\r\n    const query = `\r\n      SELECT p.*, c.name as category_name \r\n      FROM products p \r\n      LEFT JOIN categories c ON p.category_id = c.id \r\n      WHERE p.id = $1 AND p.is_active = true\r\n    `;\r\n    const result = await pool.query(query, [id]);\r\n    return result.rows[0] || null;\r\n  }\r\n\r\n  static async getBySlug(slug: string): Promise<Product | null> {\r\n    const query = `\r\n      SELECT p.*, c.name as category_name \r\n      FROM products p \r\n      LEFT JOIN categories c ON p.category_id = c.id \r\n      WHERE p.slug = $1 AND p.is_active = true\r\n    `;\r\n    const result = await pool.query(query, [slug]);\r\n    return result.rows[0] || null;\r\n  }\r\n\r\n  static async getFeatured(limit: number = 8): Promise<Product[]> {\r\n    return this.getAll({ featured: true, limit });\r\n  }\r\n\r\n  static async getByCategory(categorySlug: string, limit?: number): Promise<Product[]> {\r\n    return this.getAll({ category: categorySlug, limit });\r\n  }\r\n\r\n  static async search(searchTerm: string, limit?: number): Promise<Product[]> {\r\n    return this.getAll({ search: searchTerm, limit });\r\n  }\r\n\r\n  static async create(productData: Omit<Product, 'id' | 'created_at' | 'updated_at'>): Promise<Product> {\r\n    const query = `\r\n      INSERT INTO products (\r\n        name, slug, description, short_description, price, original_price,\r\n        category_id, image_url, images, rating, reviews_count, in_stock,\r\n        stock_quantity, sku, tags, meta_title, meta_description, is_featured, is_active\r\n      ) VALUES (\r\n        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19\r\n      ) RETURNING *\r\n    `;\r\n    \r\n    const params = [\r\n      productData.name,\r\n      productData.slug,\r\n      productData.description,\r\n      productData.short_description,\r\n      productData.price,\r\n      productData.original_price,\r\n      productData.category_id,\r\n      productData.image_url,\r\n      productData.images,\r\n      productData.rating,\r\n      productData.reviews_count,\r\n      productData.in_stock,\r\n      productData.stock_quantity,\r\n      productData.sku,\r\n      productData.tags,\r\n      productData.meta_title,\r\n      productData.meta_description,\r\n      productData.is_featured,\r\n      productData.is_active\r\n    ];\r\n\r\n    const result = await pool.query(query, params);\r\n    return result.rows[0];\r\n  }\r\n\r\n  static async update(id: number, productData: Partial<Product>): Promise<Product | null> {\r\n    const fields: string[] = [];\r\n    const params: any[] = [];\r\n    let paramIndex = 1;\r\n\r\n    Object.entries(productData).forEach(([key, value]) => {\r\n      if (key !== 'id' && key !== 'created_at' && key !== 'updated_at' && value !== undefined) {\r\n        fields.push(`${key} = $${paramIndex}`);\r\n        params.push(value);\r\n        paramIndex++;\r\n      }\r\n    });\r\n\r\n    if (fields.length === 0) return null;\r\n\r\n    const query = `\r\n      UPDATE products \r\n      SET ${fields.join(', ')} \r\n      WHERE id = $${paramIndex} \r\n      RETURNING *\r\n    `;\r\n    params.push(id);\r\n\r\n    const result = await pool.query(query, params);\r\n    return result.rows[0] || null;\r\n  }\r\n\r\n  static async delete(id: number): Promise<boolean> {\r\n    const query = 'UPDATE products SET is_active = false WHERE id = $1';\r\n    const result = await pool.query(query, [id]);\r\n    return (result.rowCount ?? 0) > 0;\r\n  }\r\n\r\n  static async updateStock(id: number, quantity: number): Promise<void> {\r\n    const query = 'UPDATE products SET stock_quantity = $2 WHERE id = $1';\r\n    await pool.query(query, [id, quantity]);\r\n  }\r\n\r\n  static async updateRating(productId: number): Promise<void> {\r\n    const query = `\r\n      UPDATE products \r\n      SET \r\n        rating = (SELECT AVG(rating) FROM reviews WHERE product_id = $1 AND is_approved = true),\r\n        reviews_count = (SELECT COUNT(*) FROM reviews WHERE product_id = $1 AND is_approved = true)\r\n      WHERE id = $1\r\n    `;\r\n    await pool.query(query, [productId]);\r\n  }\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/work/project/app/api/products/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { ProductModel } from '@/lib/models/Product';\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const id = parseInt(params.id);\r\n    \r\n    if (isNaN(id)) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Invalid product ID' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const product = await ProductModel.getById(id);\r\n    \r\n    if (!product) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Product not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: product\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching product:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Failed to fetch product' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const id = parseInt(params.id);\r\n    const body = await request.json();\r\n    \r\n    if (isNaN(id)) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Invalid product ID' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const product = await ProductModel.update(id, body);\r\n    \r\n    if (!product) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Product not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: product\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error updating product:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Failed to update product' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function DELETE(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const id = parseInt(params.id);\r\n    \r\n    if (isNaN(id)) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Invalid product ID' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const success = await ProductModel.delete(id);\r\n    \r\n    if (!success) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Product not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Product deleted successfully'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error deleting product:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Failed to delete product' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":";;;;;AAAA;AACA;;;;;;;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,KAAK,SAAS,OAAO,EAAE;QAE7B,IAAI,MAAM,KAAK;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAqB,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,MAAM,0HAAA,CAAA,eAAY,CAAC,OAAO,CAAC;QAE3C,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAoB,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA0B,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,KAAK,SAAS,OAAO,EAAE;QAC7B,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,IAAI,MAAM,KAAK;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAqB,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,MAAM,0HAAA,CAAA,eAAY,CAAC,MAAM,CAAC,IAAI;QAE9C,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAoB,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA2B,GACpD;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,OACpB,OAAoB,EACpB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,KAAK,SAAS,OAAO,EAAE;QAE7B,IAAI,MAAM,KAAK;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAqB,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,MAAM,0HAAA,CAAA,eAAY,CAAC,MAAM,CAAC;QAE1C,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAoB,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA2B,GACpD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}