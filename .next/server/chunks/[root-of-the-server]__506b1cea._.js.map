{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/work/project/lib/redis.ts"],"sourcesContent":["// Централизованная конфигурация Redis с fallback\r\nlet redis: any = null;\r\nlet isRedisAvailable = false;\r\n\r\n// Инициализация Redis только на сервере\r\nif (typeof window === 'undefined' && process.env.REDIS_URL) {\r\n  try {\r\n    const Redis = require('ioredis');\r\n    redis = new Redis(process.env.REDIS_URL);\r\n    isRedisAvailable = true;\r\n    \r\n    redis.on('error', (error: any) => {\r\n      console.warn('Redis connection error:', error);\r\n      isRedisAvailable = false;\r\n    });\r\n    \r\n    redis.on('connect', () => {\r\n      console.log('Redis connected successfully');\r\n      isRedisAvailable = true;\r\n    });\r\n  } catch (error) {\r\n    console.warn('Redis module not available, caching disabled');\r\n    redis = null;\r\n    isRedisAvailable = false;\r\n  }\r\n}\r\n\r\nexport { redis, isRedisAvailable };\r\n\r\n// Безопасные методы для работы с Redis\r\nexport const safeRedisGet = async (key: string): Promise<string | null> => {\r\n  if (!redis || !isRedisAvailable) return null;\r\n  \r\n  try {\r\n    return await redis.get(key);\r\n  } catch (error) {\r\n    console.warn('Redis GET error:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const safeRedisSet = async (\r\n  key: string, \r\n  value: string, \r\n  expiration?: number\r\n): Promise<boolean> => {\r\n  if (!redis || !isRedisAvailable) return false;\r\n  \r\n  try {\r\n    if (expiration) {\r\n      await redis.set(key, value, 'EX', expiration);\r\n    } else {\r\n      await redis.set(key, value);\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.warn('Redis SET error:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const safeRedisIncr = async (key: string): Promise<number | null> => {\r\n  if (!redis || !isRedisAvailable) return null;\r\n  \r\n  try {\r\n    return await redis.incr(key);\r\n  } catch (error) {\r\n    console.warn('Redis INCR error:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const safeRedisExpire = async (key: string, seconds: number): Promise<boolean> => {\r\n  if (!redis || !isRedisAvailable) return false;\r\n  \r\n  try {\r\n    await redis.expire(key, seconds);\r\n    return true;\r\n  } catch (error) {\r\n    console.warn('Redis EXPIRE error:', error);\r\n    return false;\r\n  }\r\n}; "],"names":[],"mappings":"AAAA,iDAAiD;;;;;;;;;AACjD,IAAI,QAAa;AACjB,IAAI,mBAAmB;AAEvB,wCAAwC;AACxC,IAAI,gBAAkB,eAAe,QAAQ,GAAG,CAAC,SAAS,EAAE;IAC1D,IAAI;QACF,MAAM;;;;;QACN,QAAQ,IAAI,MAAM,QAAQ,GAAG,CAAC,SAAS;QACvC,mBAAmB;QAEnB,MAAM,EAAE,CAAC,SAAS,CAAC;YACjB,QAAQ,IAAI,CAAC,2BAA2B;YACxC,mBAAmB;QACrB;QAEA,MAAM,EAAE,CAAC,WAAW;YAClB,QAAQ,GAAG,CAAC;YACZ,mBAAmB;QACrB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC;QACb,QAAQ;QACR,mBAAmB;IACrB;AACF;;AAKO,MAAM,eAAe,OAAO;IACjC,IAAI,CAAC,SAAS,CAAC,kBAAkB,OAAO;IAExC,IAAI;QACF,OAAO,MAAM,MAAM,GAAG,CAAC;IACzB,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC,oBAAoB;QACjC,OAAO;IACT;AACF;AAEO,MAAM,eAAe,OAC1B,KACA,OACA;IAEA,IAAI,CAAC,SAAS,CAAC,kBAAkB,OAAO;IAExC,IAAI;QACF,IAAI,YAAY;YACd,MAAM,MAAM,GAAG,CAAC,KAAK,OAAO,MAAM;QACpC,OAAO;YACL,MAAM,MAAM,GAAG,CAAC,KAAK;QACvB;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC,oBAAoB;QACjC,OAAO;IACT;AACF;AAEO,MAAM,gBAAgB,OAAO;IAClC,IAAI,CAAC,SAAS,CAAC,kBAAkB,OAAO;IAExC,IAAI;QACF,OAAO,MAAM,MAAM,IAAI,CAAC;IAC1B,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC,qBAAqB;QAClC,OAAO;IACT;AACF;AAEO,MAAM,kBAAkB,OAAO,KAAa;IACjD,IAAI,CAAC,SAAS,CAAC,kBAAkB,OAAO;IAExC,IAAI;QACF,MAAM,MAAM,MAAM,CAAC,KAAK;QACxB,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC,uBAAuB;QACpC,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/work/project/lib/models/Product.ts"],"sourcesContent":["import { Pool } from 'pg';\nimport { safeRedisGet, safeRedisSet } from '@/lib/redis';\n\nconst pool = new Pool({\n  user: process.env.DB_USER || 'postgres',\n  host: process.env.DB_HOST || 'localhost',\n  database: process.env.DB_NAME || 'balloons_store',\n  password: process.env.DB_PASSWORD || 'password',\n  port: parseInt(process.env.DB_PORT || '5432'),\n  ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false,\n});\n\nexport interface Product {\n  id: number;\n  name: string;\n  slug: string;\n  description?: string;\n  short_description?: string;\n  price: number;\n  original_price?: number;\n  category_id?: number;\n  image_url?: string;\n  images?: string[];\n  rating: number;\n  reviews_count: number;\n  in_stock: boolean;\n  stock_quantity: number;\n  sku?: string;\n  tags?: string[];\n  meta_title?: string;\n  meta_description?: string;\n  is_featured: boolean;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport class ProductModel {\n  \n  static async getAll(filters?: {\n    category?: string;\n    search?: string;\n    featured?: boolean;\n    limit?: number;\n    offset?: number;\n    store_id?: number;\n  }): Promise<Product[]> {\n    // Кэшируем только популярные запросы (без поиска)\n    const canCache = !filters?.search;\n    const cacheKey = canCache ? `products:${JSON.stringify(filters)}` : null;\n    if (canCache && cacheKey) {\n      const cached = await safeRedisGet(cacheKey);\n      if (cached) return JSON.parse(cached);\n    }\n    let query = `\n      SELECT p.*, c.name as category_name \n    `;\n    if (filters?.store_id) {\n      query += ', ps.stock_quantity';\n    }\n    query += ` FROM products p \n      LEFT JOIN categories c ON p.category_id = c.id \n    `;\n    if (filters?.store_id) {\n      query += 'LEFT JOIN product_stocks ps ON ps.product_id = p.id AND ps.store_id = $storeId$ ';\n    }\n    query += 'WHERE p.is_active = true';\n    const params: any[] = [];\n    let paramIndex = 1;\n    if (filters?.category) {\n      query += ` AND c.slug = $${paramIndex}`;\n      params.push(filters.category);\n      paramIndex++;\n    }\n    if (filters?.search) {\n      query += ` AND (p.name ILIKE $${paramIndex} OR p.description ILIKE $${paramIndex})`;\n      params.push(`%${filters.search}%`);\n      paramIndex++;\n    }\n    if (filters?.featured) {\n      query += ` AND p.is_featured = true`;\n    }\n    if (filters?.store_id) {\n      query += ` AND ps.stock_quantity > 0`;\n    }\n    query += ` ORDER BY p.sort_order ASC, p.created_at DESC`;\n    if (filters?.limit) {\n      query += ` LIMIT $${paramIndex}`;\n      params.push(filters.limit);\n      paramIndex++;\n    }\n    if (filters?.offset) {\n      query += ` OFFSET $${paramIndex}`;\n      params.push(filters.offset);\n    }\n    // Подстановка store_id\n    let finalQuery = query;\n    if (filters?.store_id) {\n      finalQuery = query.replace(/\\$storeId\\$/g, `$${paramIndex}`);\n      params.push(filters.store_id);\n    }\n    const result = await pool.query(finalQuery, params);\n    if (canCache && cacheKey) {\n      await safeRedisSet(cacheKey, JSON.stringify(result.rows), 60); // 1 минута\n    }\n    return result.rows;\n  }\n\n  static async getById(id: number): Promise<Product | null> {\n    const query = `\n      SELECT p.*, c.name as category_name \n      FROM products p \n      LEFT JOIN categories c ON p.category_id = c.id \n      WHERE p.id = $1 AND p.is_active = true\n    `;\n    const result = await pool.query(query, [id]);\n    return result.rows[0] || null;\n  }\n\n  static async getBySlug(slug: string): Promise<Product | null> {\n    const query = `\n      SELECT p.*, c.name as category_name \n      FROM products p \n      LEFT JOIN categories c ON p.category_id = c.id \n      WHERE p.slug = $1 AND p.is_active = true\n    `;\n    const result = await pool.query(query, [slug]);\n    return result.rows[0] || null;\n  }\n\n  static async getFeatured(limit: number = 8): Promise<Product[]> {\n    return this.getAll({ featured: true, limit });\n  }\n\n  static async getByCategory(categorySlug: string, limit?: number): Promise<Product[]> {\n    return this.getAll({ category: categorySlug, limit });\n  }\n\n  static async search(searchTerm: string, limit?: number): Promise<Product[]> {\n    return this.getAll({ search: searchTerm, limit });\n  }\n\n  static async create(productData: Omit<Product, 'id' | 'created_at' | 'updated_at'>): Promise<Product> {\n    const query = `\n      INSERT INTO products (\n        name, slug, description, short_description, price, original_price,\n        category_id, image_url, images, rating, reviews_count, in_stock,\n        stock_quantity, sku, tags, meta_title, meta_description, is_featured, is_active\n      ) VALUES (\n        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19\n      ) RETURNING *\n    `;\n    \n    const params = [\n      productData.name,\n      productData.slug,\n      productData.description,\n      productData.short_description,\n      productData.price,\n      productData.original_price,\n      productData.category_id,\n      productData.image_url,\n      productData.images,\n      productData.rating,\n      productData.reviews_count,\n      productData.in_stock,\n      productData.stock_quantity,\n      productData.sku,\n      productData.tags,\n      productData.meta_title,\n      productData.meta_description,\n      productData.is_featured,\n      productData.is_active\n    ];\n\n    const result = await pool.query(query, params);\n    return result.rows[0];\n  }\n\n  static async update(id: number, productData: Partial<Product>): Promise<Product | null> {\n    const fields: string[] = [];\n    const params: any[] = [];\n    let paramIndex = 1;\n\n    Object.entries(productData).forEach(([key, value]) => {\n      if (key !== 'id' && key !== 'created_at' && key !== 'updated_at' && value !== undefined) {\n        fields.push(`${key} = $${paramIndex}`);\n        params.push(value);\n        paramIndex++;\n      }\n    });\n\n    if (fields.length === 0) return null;\n\n    const query = `\n      UPDATE products \n      SET ${fields.join(', ')} \n      WHERE id = $${paramIndex} \n      RETURNING *\n    `;\n    params.push(id);\n\n    const result = await pool.query(query, params);\n    return result.rows[0] || null;\n  }\n\n  static async delete(id: number): Promise<boolean> {\n    const query = 'UPDATE products SET is_active = false WHERE id = $1';\n    const result = await pool.query(query, [id]);\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  static async updateStock(id: number, quantity: number): Promise<void> {\n    const query = 'UPDATE products SET stock_quantity = $2 WHERE id = $1';\n    await pool.query(query, [id, quantity]);\n  }\n\n  static async updateRating(productId: number): Promise<void> {\n    const query = `\n      UPDATE products \n      SET \n        rating = (SELECT AVG(rating) FROM reviews WHERE product_id = $1 AND is_approved = true),\n        reviews_count = (SELECT COUNT(*) FROM reviews WHERE product_id = $1 AND is_approved = true)\n      WHERE id = $1\n    `;\n    await pool.query(query, [productId]);\n  }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/work/project/app/api/products/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { ProductModel } from '@/lib/models/Product';\r\n\r\ninterface Product {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  originalPrice?: number;\r\n  image: string;\r\n  rating: number;\r\n  reviews: number;\r\n  category: string;\r\n  inStock: boolean;\r\n  description: string;\r\n  tags: string[];\r\n}\r\n\r\n// Мокированные данные товаров\r\nconst products: Product[] = [\r\n  {\r\n    id: 1,\r\n    name: 'Набор воздушных шаров \"Радуга\"',\r\n    price: 1299,\r\n    originalPrice: 1599,\r\n    image: '/images/products/balloon.png',\r\n    rating: 4.8,\r\n    reviews: 124,\r\n    category: 'Воздушные шары',\r\n    inStock: true,\r\n    description: 'Яркий набор воздушных шаров в цветах радуги. Идеально подходит для детских праздников и дней рождения.',\r\n    tags: ['воздушные шары', 'детский праздник', 'радуга', 'день рождения']\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Декор для дня рождения \"Принцесса\"',\r\n    price: 2499,\r\n    image: '/images/products/balloon.png',\r\n    rating: 4.9,\r\n    reviews: 89,\r\n    category: 'Детские праздники',\r\n    inStock: true,\r\n    description: 'Полный набор декораций для создания сказочного праздника маленькой принцессы.',\r\n    tags: ['принцесса', 'детский праздник', 'декор', 'розовый']\r\n  },\r\n  // Добавьте больше товаров по необходимости\r\n];\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    \r\n    const filters = {\r\n      category: searchParams.get('category') || undefined,\r\n      search: searchParams.get('search') || undefined,\r\n      featured: searchParams.get('featured') === 'true',\r\n      limit: searchParams.get('limit') ? parseInt(searchParams.get('limit')!) : undefined,\r\n      offset: searchParams.get('offset') ? parseInt(searchParams.get('offset')!) : undefined,\r\n      store_id: searchParams.get('store_id') ? parseInt(searchParams.get('store_id')!) : undefined,\r\n    };\r\n\r\n    const products = await ProductModel.getAll(filters);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: products,\r\n      count: products.length\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching products:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Failed to fetch products' \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    \r\n    // Базовая валидация\r\n    if (!body.name || !body.price) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Name and price are required' \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Генерация slug из названия если не указан\r\n    if (!body.slug) {\r\n      body.slug = body.name\r\n        .toLowerCase()\r\n        .replace(/[^a-z0-9]/g, '-')\r\n        .replace(/-+/g, '-')\r\n        .replace(/^-|-$/g, '');\r\n    }\r\n\r\n    const product = await ProductModel.create(body);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: product\r\n    }, { status: 201 });\r\n\r\n  } catch (error) {\r\n    console.error('Error creating product:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Failed to create product' \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;AAgBA,8BAA8B;AAC9B,MAAM,WAAsB;IAC1B;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,eAAe;QACf,OAAO;QACP,QAAQ;QACR,SAAS;QACT,UAAU;QACV,SAAS;QACT,aAAa;QACb,MAAM;YAAC;YAAkB;YAAoB;YAAU;SAAgB;IACzE;IACA;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,OAAO;QACP,QAAQ;QACR,SAAS;QACT,UAAU;QACV,SAAS;QACT,aAAa;QACb,MAAM;YAAC;YAAa;YAAoB;YAAS;SAAU;IAC7D;CAED;AAEM,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAE5C,MAAM,UAAU;YACd,UAAU,aAAa,GAAG,CAAC,eAAe;YAC1C,QAAQ,aAAa,GAAG,CAAC,aAAa;YACtC,UAAU,aAAa,GAAG,CAAC,gBAAgB;YAC3C,OAAO,aAAa,GAAG,CAAC,WAAW,SAAS,aAAa,GAAG,CAAC,YAAa;YAC1E,QAAQ,aAAa,GAAG,CAAC,YAAY,SAAS,aAAa,GAAG,CAAC,aAAc;YAC7E,UAAU,aAAa,GAAG,CAAC,cAAc,SAAS,aAAa,GAAG,CAAC,eAAgB;QACrF;QAEA,MAAM,WAAW,MAAM,0HAAA,CAAA,eAAY,CAAC,MAAM,CAAC;QAE3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;YACN,OAAO,SAAS,MAAM;QACxB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;QACT,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,oBAAoB;QACpB,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,4CAA4C;QAC5C,IAAI,CAAC,KAAK,IAAI,EAAE;YACd,KAAK,IAAI,GAAG,KAAK,IAAI,CAClB,WAAW,GACX,OAAO,CAAC,cAAc,KACtB,OAAO,CAAC,OAAO,KACf,OAAO,CAAC,UAAU;QACvB;QAEA,MAAM,UAAU,MAAM,0HAAA,CAAA,eAAY,CAAC,MAAM,CAAC;QAE1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR,GAAG;YAAE,QAAQ;QAAI;IAEnB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;QACT,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}