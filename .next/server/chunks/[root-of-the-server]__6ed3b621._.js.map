{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/work/project/lib/db/index.ts"],"sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\n\r\ninterface Product {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  salePrice: number | null;\r\n  category: string;\r\n  stock: number;\r\n  images: string[];\r\n  featured: boolean;\r\n  published: boolean;\r\n  createdAt: string;\r\n}\r\n\r\ninterface Review {\r\n  id: string;\r\n  productId: string;\r\n  productName: string;\r\n  userName: string;\r\n  rating: number;\r\n  content: string;\r\n  status: 'pending' | 'approved' | 'rejected';\r\n  createdAt: string;\r\n}\r\n\r\ninterface DbData {\r\n  products: Product[];\r\n  reviews: Review[];\r\n}\r\n\r\n// Путь к JSON файлам\r\nconst DB_DIR = path.join(process.cwd(), 'lib', 'db');\r\nconst PRODUCTS_FILE = path.join(DB_DIR, 'products.json');\r\nconst REVIEWS_FILE = path.join(DB_DIR, 'reviews.json');\r\n\r\n// Функция для чтения данных из JSON файла\r\nexport function readJsonFile<T>(filePath: string): T {\r\n  try {\r\n    const fileContent = fs.readFileSync(filePath, 'utf8');\r\n    return JSON.parse(fileContent) as T;\r\n  } catch (error) {\r\n    console.error(`Error reading file ${filePath}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Функция для записи данных в JSON файл\r\nexport function writeJsonFile<T>(filePath: string, data: T): void {\r\n  try {\r\n    const jsonString = JSON.stringify(data, null, 2);\r\n    fs.writeFileSync(filePath, jsonString, 'utf8');\r\n  } catch (error) {\r\n    console.error(`Error writing to file ${filePath}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Функции для работы с товарами\r\nexport function getAllProducts(): Product[] {\r\n  const data = readJsonFile<{ products: Product[] }>(PRODUCTS_FILE);\r\n  return data.products;\r\n}\r\n\r\nexport function getProductById(id: string): Product | null {\r\n  const products = getAllProducts();\r\n  return products.find(product => product.id === id) || null;\r\n}\r\n\r\nexport function createProduct(product: Omit<Product, 'id' | 'createdAt'>): Product {\r\n  const products = getAllProducts();\r\n  const newId = (Math.max(...products.map(p => parseInt(p.id)), 0) + 1).toString();\r\n  \r\n  const newProduct: Product = {\r\n    ...product,\r\n    id: newId,\r\n    createdAt: new Date().toISOString()\r\n  };\r\n  \r\n  products.push(newProduct);\r\n  writeJsonFile(PRODUCTS_FILE, { products });\r\n  \r\n  return newProduct;\r\n}\r\n\r\nexport function updateProduct(id: string, updates: Partial<Omit<Product, 'id' | 'createdAt'>>): Product | null {\r\n  const products = getAllProducts();\r\n  const productIndex = products.findIndex(p => p.id === id);\r\n  \r\n  if (productIndex === -1) {\r\n    return null;\r\n  }\r\n  \r\n  const updatedProduct = {\r\n    ...products[productIndex],\r\n    ...updates\r\n  };\r\n  \r\n  products[productIndex] = updatedProduct;\r\n  writeJsonFile(PRODUCTS_FILE, { products });\r\n  \r\n  return updatedProduct;\r\n}\r\n\r\nexport function deleteProduct(id: string): boolean {\r\n  const products = getAllProducts();\r\n  const productIndex = products.findIndex(p => p.id === id);\r\n  \r\n  if (productIndex === -1) {\r\n    return false;\r\n  }\r\n  \r\n  products.splice(productIndex, 1);\r\n  writeJsonFile(PRODUCTS_FILE, { products });\r\n  \r\n  return true;\r\n}\r\n\r\n// Функции для работы с отзывами\r\nexport function getAllReviews(): Review[] {\r\n  const data = readJsonFile<{ reviews: Review[] }>(REVIEWS_FILE);\r\n  return data.reviews;\r\n}\r\n\r\nexport function getReviewsByStatus(status: 'pending' | 'approved' | 'rejected'): Review[] {\r\n  const reviews = getAllReviews();\r\n  return reviews.filter(review => review.status === status);\r\n}\r\n\r\nexport function getReviewById(id: string): Review | null {\r\n  const reviews = getAllReviews();\r\n  return reviews.find(review => review.id === id) || null;\r\n}\r\n\r\nexport function updateReviewStatus(id: string, status: 'pending' | 'approved' | 'rejected'): Review | null {\r\n  const reviews = getAllReviews();\r\n  const reviewIndex = reviews.findIndex(r => r.id === id);\r\n  \r\n  if (reviewIndex === -1) {\r\n    return null;\r\n  }\r\n  \r\n  reviews[reviewIndex].status = status;\r\n  writeJsonFile(REVIEWS_FILE, { reviews });\r\n  \r\n  return reviews[reviewIndex];\r\n}\r\n\r\nexport function createReview(review: Omit<Review, 'id' | 'createdAt' | 'status'>): Review {\r\n  const reviews = getAllReviews();\r\n  const newId = (Math.max(...reviews.map(r => parseInt(r.id)), 0) + 1).toString();\r\n  \r\n  const newReview: Review = {\r\n    ...review,\r\n    id: newId,\r\n    status: 'pending',\r\n    createdAt: new Date().toISOString()\r\n  };\r\n  \r\n  reviews.push(newReview);\r\n  writeJsonFile(REVIEWS_FILE, { reviews });\r\n  \r\n  return newReview;\r\n}\r\n\r\nexport function deleteReview(id: string): boolean {\r\n  const reviews = getAllReviews();\r\n  const reviewIndex = reviews.findIndex(r => r.id === id);\r\n  \r\n  if (reviewIndex === -1) {\r\n    return false;\r\n  }\r\n  \r\n  reviews.splice(reviewIndex, 1);\r\n  writeJsonFile(REVIEWS_FILE, { reviews });\r\n  \r\n  return true;\r\n}\r\n\r\n// Экспортируем типы\r\nexport type { Product, Review }; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/work/project/app/api/admin/products/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { getProductById, updateProduct, deleteProduct } from '@/lib/db';\r\nimport type { Product } from '@/lib/db';\r\n\r\n// Проверка авторизации админа (такая же, как в app/api/admin/products/route.ts)\r\nfunction verifyAdminToken(request: NextRequest | Request) {\r\n  const authorization = request.headers.get('authorization') || request.headers.get('Authorization');\r\n  if (!authorization || !authorization.startsWith('Bearer ')) {\r\n    return null;\r\n  }\r\n\r\n  const token = authorization.replace('Bearer ', '');\r\n  \r\n  try {\r\n    // В реальном приложении здесь должна быть проверка JWT\r\n    // Для демонстрации считаем, что любой непустой токен действителен\r\n    if (token.length > 0) {\r\n      return { role: 'admin' };\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\n// GET /api/admin/products/[id] - получить товар по ID\r\nexport async function GET(\r\n  request: NextRequest,\r\n  context: { params: { id: string } }\r\n) {\r\n  try {\r\n    // Проверка авторизации\r\n    const adminUser = verifyAdminToken(request);\r\n    if (!adminUser) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Unauthorized' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n    \r\n    const id = context.params.id;\r\n    const product = getProductById(id);\r\n    \r\n    if (!product) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Product not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      data: product\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error fetching product with ID ${context.params.id}:`, error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Failed to fetch product' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT /api/admin/products/[id] - обновить товар\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  context: { params: { id: string } }\r\n) {\r\n  try {\r\n    // Проверка авторизации\r\n    const adminUser = verifyAdminToken(request);\r\n    if (!adminUser) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Unauthorized' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n    \r\n    const id = context.params.id;\r\n    const formData = await request.formData();\r\n    \r\n    // Извлекаем данные из FormData\r\n    const updates: Record<string, any> = {};\r\n    \r\n    // Имя товара\r\n    const name = formData.get('name');\r\n    if (name) updates.name = name as string;\r\n    \r\n    // Описание\r\n    const description = formData.get('description');\r\n    if (description) updates.description = description as string;\r\n    \r\n    // Цена\r\n    const price = formData.get('price');\r\n    if (price) updates.price = parseFloat(price as string);\r\n    \r\n    // Цена со скидкой\r\n    const salePrice = formData.get('salePrice') || formData.get('original_price');\r\n    if (salePrice) {\r\n      const salePriceValue = parseFloat(salePrice as string);\r\n      updates.salePrice = !isNaN(salePriceValue) ? salePriceValue : null;\r\n    }\r\n    \r\n    // Категория\r\n    const category = formData.get('category') || formData.get('category_id');\r\n    if (category) updates.category = category as string;\r\n    \r\n    // Количество товара\r\n    const stock = formData.get('stock') || formData.get('stock_quantity');\r\n    if (stock) updates.stock = parseInt(stock as string);\r\n    \r\n    // Рекомендуемый товар\r\n    const featured = formData.get('featured') || formData.get('is_featured');\r\n    if (featured !== null && featured !== undefined) {\r\n      updates.featured = featured === 'true';\r\n    }\r\n    \r\n    // Опубликован\r\n    const published = formData.get('published');\r\n    if (published !== null && published !== undefined) {\r\n      updates.published = published === 'true';\r\n    }\r\n    \r\n    // Обновляем товар\r\n    const updatedProduct = updateProduct(id, updates);\r\n    \r\n    if (!updatedProduct) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Product not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      data: updatedProduct\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error updating product with ID ${context.params.id}:`, error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Failed to update product' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE /api/admin/products/[id] - удалить товар\r\nexport async function DELETE(\r\n  request: NextRequest,\r\n  context: { params: { id: string } }\r\n) {\r\n  try {\r\n    // Проверка авторизации\r\n    const adminUser = verifyAdminToken(request);\r\n    if (!adminUser) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Unauthorized' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n    \r\n    const id = context.params.id;\r\n    const success = deleteProduct(id);\r\n    \r\n    if (!success) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Product not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Product deleted successfully'\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error deleting product with ID ${context.params.id}:`, error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Failed to delete product' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}