{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/work/project/app/api/admin/stats/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// Проверка авторизации админа\r\nfunction verifyAdminToken(request: NextRequest) {\r\n  const authorization = request.headers.get('authorization');\r\n  if (!authorization || !authorization.startsWith('Bearer ')) {\r\n    return null;\r\n  }\r\n\r\n  const token = authorization.replace('Bearer ', '');\r\n  \r\n  try {\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret') as any;\r\n    if (decoded.role !== 'admin') {\r\n      return null;\r\n    }\r\n    return decoded;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Проверка авторизации\r\n    const adminUser = verifyAdminToken(request);\r\n    if (!adminUser) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Unauthorized' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Моковые данные статистики (в реальном приложении данные берутся из БД)\r\n    const stats = {\r\n      totalProducts: 156,\r\n      totalUsers: 1240,\r\n      totalOrders: 523,\r\n      totalRevenue: 2450000,\r\n      pendingReviews: 12,\r\n      todayOrders: 15,\r\n      weeklyRevenue: 145000,\r\n      popularProducts: [\r\n        { name: 'Воздушные шары \"Радуга\"', sales: 45 },\r\n        { name: 'Фольгированные звезды', sales: 38 },\r\n        { name: 'Шары для моделирования', sales: 32 }\r\n      ]\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: stats\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching admin stats:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Failed to fetch stats' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,8BAA8B;AAC9B,SAAS,iBAAiB,OAAoB;IAC5C,MAAM,gBAAgB,QAAQ,OAAO,CAAC,GAAG,CAAC;IAC1C,IAAI,CAAC,iBAAiB,CAAC,cAAc,UAAU,CAAC,YAAY;QAC1D,OAAO;IACT;IAEA,MAAM,QAAQ,cAAc,OAAO,CAAC,WAAW;IAE/C,IAAI;QACF,MAAM,UAAU,iHAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QAC5D,IAAI,QAAQ,IAAI,KAAK,SAAS;YAC5B,OAAO;QACT;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,uBAAuB;QACvB,MAAM,YAAY,iBAAiB;QACnC,IAAI,CAAC,WAAW;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAe,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAEA,yEAAyE;QACzE,MAAM,QAAQ;YACZ,eAAe;YACf,YAAY;YACZ,aAAa;YACb,cAAc;YACd,gBAAgB;YAChB,aAAa;YACb,eAAe;YACf,iBAAiB;gBACf;oBAAE,MAAM;oBAA2B,OAAO;gBAAG;gBAC7C;oBAAE,MAAM;oBAAyB,OAAO;gBAAG;gBAC3C;oBAAE,MAAM;oBAA0B,OAAO;gBAAG;aAC7C;QACH;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAwB,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}