{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [],
  "headers": [
    {
      "source": "/api/:path*",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=3600, stale-while-revalidate=86400"
        }
      ],
      "regex": "^/api(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
    },
    {
      "source": "/_next/static/:path*",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ],
      "regex": "^/_next/static(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
    },
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        }
      ],
      "regex": "^(?:/(.*))(?:/)?$"
    }
  ],
  "dynamicRoutes": [
    {
      "page": "/api/orders/[id]",
      "regex": "^/api/orders/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/orders/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/products/[id]",
      "regex": "^/api/products/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/products/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/products/[id]/reviews",
      "regex": "^/api/products/([^/]+?)/reviews(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/products/(?<nxtPid>[^/]+?)/reviews(?:/)?$"
    },
    {
      "page": "/products/[id]",
      "regex": "^/products/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/products/(?<nxtPid>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/CatalogPage",
      "regex": "^/CatalogPage(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/CatalogPage(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/about",
      "regex": "^/about(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/about(?:/)?$"
    },
    {
      "page": "/admin",
      "regex": "^/admin(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin(?:/)?$"
    },
    {
      "page": "/admin/dashboard",
      "regex": "^/admin/dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/dashboard(?:/)?$"
    },
    {
      "page": "/admin/login",
      "regex": "^/admin/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/login(?:/)?$"
    },
    {
      "page": "/admin/pages",
      "regex": "^/admin/pages(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/pages(?:/)?$"
    },
    {
      "page": "/admin/products/add",
      "regex": "^/admin/products/add(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/products/add(?:/)?$"
    },
    {
      "page": "/admin/seo",
      "regex": "^/admin/seo(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/seo(?:/)?$"
    },
    {
      "page": "/admin_dashboard",
      "regex": "^/admin_dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin_dashboard(?:/)?$"
    },
    {
      "page": "/admin_dashboard/products",
      "regex": "^/admin_dashboard/products(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin_dashboard/products(?:/)?$"
    },
    {
      "page": "/admin_dashboard/products/add",
      "regex": "^/admin_dashboard/products/add(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin_dashboard/products/add(?:/)?$"
    },
    {
      "page": "/admin_dashboard/reviews",
      "regex": "^/admin_dashboard/reviews(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin_dashboard/reviews(?:/)?$"
    },
    {
      "page": "/cart",
      "regex": "^/cart(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/cart(?:/)?$"
    },
    {
      "page": "/catalog",
      "regex": "^/catalog(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/catalog(?:/)?$"
    },
    {
      "page": "/contacts",
      "regex": "^/contacts(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contacts(?:/)?$"
    },
    {
      "page": "/cookies",
      "regex": "^/cookies(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/cookies(?:/)?$"
    },
    {
      "page": "/delivery",
      "regex": "^/delivery(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/delivery(?:/)?$"
    },
    {
      "page": "/discounts",
      "regex": "^/discounts(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/discounts(?:/)?$"
    },
    {
      "page": "/faq",
      "regex": "^/faq(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/faq(?:/)?$"
    },
    {
      "page": "/guarantee",
      "regex": "^/guarantee(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/guarantee(?:/)?$"
    },
    {
      "page": "/privacy",
      "regex": "^/privacy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/privacy(?:/)?$"
    },
    {
      "page": "/returns",
      "regex": "^/returns(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/returns(?:/)?$"
    },
    {
      "page": "/reviews",
      "regex": "^/reviews(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/reviews(?:/)?$"
    },
    {
      "page": "/terms",
      "regex": "^/terms(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/terms(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": [
    {
      "source": "/index.html",
      "destination": "/",
      "regex": "^/index\\.html(?:/)?$"
    }
  ]
}